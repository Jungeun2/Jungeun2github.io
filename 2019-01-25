▶ 2019.01.25◀

▷ Java의 정석 [ Chapter 04 - 조건문과 반복문 ]

# 반목문 - for, while, do-while

반복문은 어떤 작업이 반복적으로 수행되도록 할 때 사용되며, 반복문의 종류로는 for문과 while문, 그리고 while문의 변형인 do-while문이 있다.
for문이나 while문에 속한 문장은 조건에 따라 한 번도 수행되지 않을 수 있지만 do-while문에 속한 문장은 무조건 최소한 한 번은 수행될 것이 보장된다.
반복문은 주어진 조건을 만족하는 동안 주어진 문장들을 반복적으로 수행하므로 조건식을 포함하여,
if문과 마찬가지로 조건식의 결과가 true이면 참이고 false면 거짓으로 간주된다.

# for문

for문은 반복 횟수를 알고 있을 때 적합하다.
ex) for(int i=1;i<=5;i++){
          System.out.println("I can do it.");   // "I can do it."이라는 문장을 5번 출력하는 예제
    }

증감식은 다양한 연산자들로 증감식을 작성할 수도 있다.
ex) for(int i=1;i<=10;i++)   // 1부터 10까지 1씩 증가
    for(int i=10;i>=1;i--)   // 10부터 1까지 1씩 감소
    for(int i=1;i<=10;i+=2)  // 1부터 10까지 2씩 증가
    for(int i=1;i<=10;i*=3)  // 1부터 10까지 3배씩 증가
    
증감식도 쉼표','를 이용해서 두 문장 이상을 하나로 연결해서 쓸 수 있다.
ex) for(int i=1, j=10;i<=10;i++, j--)  // i는 1부터 10까지 1씩 증가, j는 10부터 1까지 1씩 감소

# 중첩 for문

10개의 별을 출력하는 for문 예제 >> 중첩 for문을 이용하는 예제
for(int i=1;i<=5;i++) {                           |       for(int i=1;i<=5;j++) {
    System.out.println("**********");             |         for(int j=1;j<=10;j++) { 
}                                                 |          System.out.print("*");  }
                                                  |            System.out.println();  }
# while문

for문에 비해 while문은 구조가 간단하다. 다만 if문과 달리 while문은 조건식이 'ture일동안', 즉 조건식이 거짓이 될 때까지 블럭 내의 문장을 반복함.
for문은 조건식을 생략할 수 있지만 while문은 생략 불가능 하다.
ex) while (조건식)  {
                // 조건식의 연산결과가 참인동안, 반복될 문장들을 적는다.
        }

# do-while문

do-while문은 while문의 변형으로 기본적인 구조는 while문과 같으나 조건식과 블럭의 순서를 바꿔놓은 것이다.
그래서 while문과 반대로 블럭을 먼저 수행한 후에 조건식을 평가한다.
ex) do {
          // 조건식의 연산결과가 참일 때 수행될 문장들을 적는다.
    } while (조건식);
    
# break문

반복문에서도 break문을 사용할 수 있는데, switch문에서 그랬던 것 처럼, break문은 자신이 포함된 가장 가까운 반복문을 벗어난다.
주로 if문과 함께 사용되어 특정 조건을 만족하면 반복문을 벗어나도록 한다.

# continue문

continue문은 반복문 내에서만 사용될 수 있으며, 반복이 진행되는 도중에 continue문을 만나면 반복문의 끝으로 이동하여 다음 반복으로 넘어간다.
for문의 경우 증감식으로 이동하며, while문과 do-while문의 경우 조건식으로 이동한다.

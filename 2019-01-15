▶ 2019.01.15◀

▷ Java의 정석 [ Chapter 04 - 조건문과 반복문 ]

# 블럭{}

괄호를 이용해서 여러 문장을 하나의 단위로 묶을 수 있는데, 이것을 블럭이라고 한다. 블럭은 '{'로 시작해서 '}'로 끝나는데,
'}'다음에 문장의 끝을 의미하는 ;를 붙이지 않는다는 것에 주의하자.
블럭 안에는 보통 여러 문장을 넣지만, 한 문장만 넣거나 아무런 문장도 넣지 않을 수 있다.
만일 블럭 내의 문장이 하나뿐 일 때는 괄호를 생략할 수 있다.

# if-else문

if문의 변형인 if-else문의 구조는 다음과 같다. if문에 'else블럭'이 더 추가되었다. 'else'의 뜻이 '그 밖의 다른'이므로
조건식의 결과가 참이 아닐 때, 즉 거짓일 때 else블럭의 문장을 수행하라는 뜻이다.
ex) if (조건식) {
            // 조건식의 참일 때 수행될 문장들을 적는다.
    } else {
            // 조건식이 거짓일 때 수행될 문장들을 적는다.
    }
조건식의 결과에 따라 이 두 개의 블럭 중 어느 한 블럭의 내용이 수행되고 전체 if문을 벗어나게 된다.
두 블럭의 내용이 모두 수행되거나, 모두 수행되지 않는 경우는 있을 수 없다.

# if-else if문

if-else문은 두 가지 경우 중 하나가 수행되는 구조인데, 처리해야할 경우의 수가 셋 이상일때는 
한 문장에 여러 개의 조건식을 쓸 수 있는 'if-else if'문을 사용하면 된다.
ex) if (조건식1) {
            // 조건식 1의 연산결과가 참일 때 수행될 문장들을 적는다.
    } else if (조건식2) {
            // 조건식 2의 연산결과가 참일 때 수행될 문장들을 적는다.
    } else if (조건식3) {        // 여러 개의 else if를 사용할 수 있다.
            // 조건식 3의 연산결과가 참일 때 수행될 문장들을 적는다.
    } else {    // 마지막에는 보통 else블럭으로 끝나며, else블럭은 생략가능하다.
            // 위의 어느 조건식도 만족하지 않을 때 수행될 문장들을 적는다.
    }
    
    첫 번째 조건식부터 순서대로 평가해서 결과가 참인 조건식을 만나면, 해당 블럭만 행하고'if - else if'문 전체를 벗어난다.
    만일 결과가 참인 조건식이 하나도 없으면, 마지막에 있는 else블럭의 문장들이 수행된다. 그리고 else블럭은 생략이 가능하다.

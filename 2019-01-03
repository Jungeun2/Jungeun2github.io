▶ 2019.01.03◀ 

▷ Java의 정석 [ Chapter 03 - 연산자 ]

# 증감 연산자 ++ --

증감연산자는 피연산자에 저장된 값을 1증가 또는 감소시킨다.
증감연산자의 피연산자로 정수와 실수가 모두 가능하지만, 상수는 값을 변경할 수 없으므로 가능하지 않다.

증가 연산자(++) : 피연산자의 값을 1 증가시킨다.
감소 연산자(--) : 피연산자의 값을 1 감소시킨다.
'++i;'와 'i++;'처럼 증감연산자가 수식이나 메서드 호출에 포함되지 않고 독립적인 하나의 문장으로 쓰인 경우에는 전위형과 후위형의 차이가 없다.
하나의 식에서 증감연산자의 사용을 최소화하고, 식에 두 번 이상 포함된 변수에 증감연산자를 사용하는 것은 피해야 한다.

# 부호 연산자 + -

부호 연산자'-'는 피연산자의 부호를 반대로 변경한 결과를 반환한다. 피연산자가 음수면 양수, 양수면 음수가 연산의 결과가 된다.
부호연산자'+'는 하는 일이 없으며, 쓰이는 경우도 거의 없다. 부호 연산자는 booleanㅎ형과 char형을 제외한 기본형에만 사용할 수 있다.

# 산술 연산자 - 사칙 연산자

산술 연산자에는 사칙 연산자(+,-,*,/)와 나머지 연산자(%)가 있다.
곰셈, 나눗셈, 나머지 연산자가 덧셈, 뺄셈 연산자보다 우선순위가 높으므로 먼저 처리된다.
그리고 피연산자가 정수형인 경우, 나누는 수로 0을 사용할 수 없다. 만일 0으로 나눈다면, 실행 시에 에러가 발생할 것이다.
>> 부동 소수점값인 0.0f, 0.0d로 나누는 것은 가능하지만 그 결과는 무한대이다.

예제 참고

class OperatorEx6 {
  public static void main(String [] args) {
    byte a = 10;
    byte b = 20;
    byte c = a + b;    // 컴파일 에러가 발생한다.(형변환 필요) >> byte c = (byte)(a+b);
    System.out.println(c);
    }
 }
 
a와 b는 모두 int형보다 작은 byte형이기 때문에 연산자'+'는 이 두 개의 피연산자들의 자료형을 int형으로 변환한 다음 연산을 수행한다.
그래서 'a+b'의 연산결과는 byte형이 아닌 int형 (4 byte)이다. 4 byte의 값을 1 byte의 변수에 형변환없이 저장하려고 했기 때문에 에러가 발생한 것이다.
크기가 작은 자료형의 변수를 큰 자료형의 변수에 저장할 때는 자동으로 형변환되지만, 반대로 큰 자료형의 값을 작은 자료형의 변수에 저장하려면
명시적으로형변환 연산자를 사용해서 변환해주어야 한다.

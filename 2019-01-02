▶ 2019.01.02◀ 

▷ Java의 정석 [ Chapter 03 - 연산자 ]

전 시간에 배운것을 복습 겸 핵심만 체크해보겠다.

- 연산자의 우선순위

1. 산술 > 비교 > 논리 > 대입. 대입은 제일 마지막에 수행된다.
2. 단항(1) > 이항(2) > 삼항(3). 단항 연산자의 우선순위가 이항 연산자보다 높다.
3. 단항 연산자와 대입 연산자를 제외한 모든 연산의 진행방향은 왼쪽에서 오른쪽이다.

# 산술 변환

이항 연산자는 두 피연산자의 타입이 일치해야 연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
예를 들어 int타입과 float타입을 덧셈하는 경우, 형변환 연산자를 사용해서 피연산자의 타입을 둘 다 int 또는 float로 일치시켜야 한다.
ex) int i = 10;
    float f = 20.0f;
    float result = f + (float)i; // 형변환으로 두 피연산자의 타입을 일치
앞서 배운 것과 같이 작은 타입에서 큰 타입으로 형변환하는 경우, 자동적으로 형변환되므로 형변환 연산자를 생략할 수 있다.
    float result = f + i; // 큰 타입으로 형변환시, 형변환연산자 생략가능
    
이처럼 연산 전에 피연산자 타입의 일치를 위해 자동 형변환되는 것을 '산술 변환' 또는 '일반 산술 변환'이라 하며,
이 변환은 이항 연산에서만 아니라 단항 연산에서도 일어난다. '산술 변환'의 규칙은 다음과 같다.

① 두 피연산자의 타입을 같게 일치시킨다.(보다 큰 타입으로 일치)
  long   + int   →  long   + long   → long
  float  + int   →  float  + float  → float
  double + float →  double + double → double
② 피연산자의 타입이 int보다 작은 타입이면 int로 변환된다.
  byte   + short →  int + int   → int
  char   + short →  int + int   → int
  
 첫 번째 규칙은 앞서 자동 형변환에서 배운 것처럼 피연산자의 값손실을 최소화하기 위한것이고,
 두 번째 규칙은 정수형의 기본 타입인 int가 가장 효율적으로 처리할 수 있는 타입이기 때문에,
 그리고 int보다 작은 타입, 예를 들면 char나 short의 표현범위가 좁아서 연산중에 오버플로우가 발생할 가능성이 높기 때문에 만들어진 것이다.
 
 일반 산술 변환이란 ? 연산 수행 직전에 발생하는 피연산자의 자동 형변환
  ① 두 피연산자의 타입을 같게 일치시킨다(보다 큰 타입으로 일치).
  ② 피연산자의 타입이 int보다 작은 타입이면 int로 변환된다.
